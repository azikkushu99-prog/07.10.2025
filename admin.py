from aiogram import Bot, types, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
import logging
from typing import List
from functools import wraps
from datetime import datetime

from db import Category, Type, Product, ProductMedia, SessionLocal, Order, OrderItem, MainMenuSection
from config import ADMIN_IDS, MEDIA_FOLDER  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ADMIN_IDS

# Setup logging for admin module
logger = logging.getLogger(__name__)

admin_router = Router()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
def admin_required(handler):
    @wraps(handler)
    async def wrapper(*args, **kwargs):
        message = None
        for arg in args:
            if isinstance(arg, (types.Message, types.CallbackQuery)):
                message = arg
                break
        if not message:
            message = kwargs.get('message') or kwargs.get('callback_query') or kwargs.get('event')

        # –ò–∑–º–µ–Ω–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ ADMIN_IDS
        if message and hasattr(message, 'from_user') and message.from_user.id not in ADMIN_IDS:
            if hasattr(message, 'answer'):
                await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            elif hasattr(message, 'message') and hasattr(message.message, 'answer'):
                await message.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        return await handler(*args, **kwargs)

    return wrapper



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddCategory(StatesGroup):
    entering_name = State()


class AddType(StatesGroup):
    choosing_category = State()
    entering_name = State()


class AddProduct(StatesGroup):
    choosing_category = State()
    choosing_type = State()
    entering_name = State()
    entering_description = State()
    entering_price = State()
    adding_media = State()


class DeleteCategory(StatesGroup):
    choosing_category = State()


class DeleteType(StatesGroup):
    choosing_category = State()
    choosing_type = State()


class DeleteProduct(StatesGroup):
    choosing_category = State()
    choosing_type = State()
    choosing_product = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
class EditMainMenu(StatesGroup):
    choosing_section = State()
    editing_text = State()
    editing_photo = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def get_admin_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")
        ],
        [
            InlineKeyboardButton(text="üè∑Ô∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø", callback_data="add_type"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–∏–ø", callback_data="delete_type")
        ],
        [
            InlineKeyboardButton(text="üö™ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")
        ],
        [
            InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="view_orders"),
            InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="edit_main_menu")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /admin
@admin_router.message(Command("admin"))
@admin_required
async def cmd_admin(message: Message):
    await message.answer(
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@admin_router.callback_query(F.data == "admin_panel")
@admin_required
async def back_to_admin_panel(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
@admin_router.callback_query(F.data == "view_orders")
@admin_required
async def view_orders(callback: types.CallbackQuery):
    db = SessionLocal()
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑—ã
        orders = db.query(Order).filter(Order.status == "pending").order_by(Order.id.desc()).all()
        if not orders:
            await callback.message.answer("üì¶ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            await callback.answer()
            return

        for order in orders:
            order_items = db.query(OrderItem).filter(OrderItem.order_id == order.id).all()
            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone_number}\n"
                f"üí∞ –°—É–º–º–∞: {order.total_amount} —Ä—É–±.\n"
                f"üìÖ –î–∞—Ç–∞: {order.created_at}\n"
                f"üõí –¢–æ–≤–∞—Ä—ã:\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –ø–µ—Ä–≤—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            for item in order_items:
                product = db.query(Product).filter(Product.id == item.product_id).first()
                if product:
                    media_files = db.query(ProductMedia).filter(ProductMedia.product_id == product.id).all()
                    if media_files:
                        first_media = media_files[0]
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
                        if first_media.media_type == 'photo':
                            await callback.message.answer_photo(
                                photo=first_media.file_id,
                                caption=(
                                    f"üö™ {product.name}\n"
                                    f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
                                    f"üë§ {order.user_name}\n"
                                    f"üìû {order.phone_number}\n"
                                    f"üí∞ {item.product_price} —Ä—É–±. x {item.quantity} = {item.product_price * item.quantity} —Ä—É–±."
                                )
                            )
                        else:
                            await callback.message.answer_video(
                                video=first_media.file_id,
                                caption=(
                                    f"üö™ {product.name}\n"
                                    f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
                                    f"üë§ {order.user_name}\n"
                                    f"üìû {order.phone_number}\n"
                                    f"üí∞ {item.product_price} —Ä—É–±. x {item.quantity} = {item.product_price * item.quantity} —Ä—É–±."
                                )
                            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            for item in order_items:
                order_text += f"‚Ä¢ {item.product_name} - {item.product_price} —Ä—É–±. x {item.quantity}\n"

            # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"complete_order_{order.id}")]
            ])
            await callback.message.answer(order_text, reply_markup=keyboard)

        await callback.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

    finally:
        db.close()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@admin_router.callback_query(F.data.startswith("complete_order_"))
@admin_required
async def complete_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    try:
        order = db.query(Order).filter(Order.id == order_id).first()
        if order:
            order.status = "completed"
            db.commit()

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
            try:
                await callback.message.delete()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            await callback.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞")
        else:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        db.rollback()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        logger.error(f"Order completion error: {e}")
    finally:
        db.close()


# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@admin_router.callback_query(F.data == "edit_main_menu")
@admin_required
async def start_edit_main_menu(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –£—Å–ª—É–≥–∏", callback_data="edit_section_services")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="edit_section_info")],
        [InlineKeyboardButton(text="üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="edit_section_consultation")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

    await callback.message.edit_text(
        "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n\n–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=keyboard
    )
    await state.set_state(EditMainMenu.choosing_section)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ò–õ–¨–¢–†
@admin_router.callback_query(EditMainMenu.choosing_section, F.data.startswith("edit_section_"))
@admin_required
async def choose_section_to_edit(callback: types.CallbackQuery, state: FSMContext):
    section_key = callback.data.replace("edit_section_", "")  # services, info, consultation

    db = SessionLocal()
    try:
        section = db.query(MainMenuSection).filter(MainMenuSection.section_key == section_key).first()
        if not section:
            await callback.answer("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        await state.update_data(section_key=section_key, section_id=section.id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞
        current_content = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: {section.title}\n\n"
        current_content += f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{section.content}\n\n"
        current_content += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:"

        await callback.message.edit_text(current_content)
        await state.set_state(EditMainMenu.editing_text)

    except Exception as e:
        logger.error(f"Error in choose_section_to_edit: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞")
    finally:
        db.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@admin_router.message(EditMainMenu.editing_text, F.text)
@admin_required
async def process_section_text(message: Message, state: FSMContext):
    new_text = message.text
    user_data = await state.get_data()
    section_key = user_data['section_key']
    section_id = user_data['section_id']

    db = SessionLocal()
    try:
        section = db.query(MainMenuSection).filter(MainMenuSection.id == section_id).first()
        if section:
            section.content = new_text
            db.commit()

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="change_photo")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ", callback_data="remove_photo")],
                [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")]
            ])

            photo_status = "–µ—Å—Ç—å" if section.photo_path else "–Ω–µ—Ç"
            await message.answer(
                f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ: {photo_status}\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ:",
                reply_markup=keyboard
            )
            await state.set_state(EditMainMenu.editing_photo)
        else:
            await message.answer("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()

    except Exception as e:
        db.rollback()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        logger.error(f"Section text update error: {e}")
        await state.clear()
    finally:
        db.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–æ—Ç–æ
@admin_router.callback_query(EditMainMenu.editing_photo, F.data.in_(["change_photo", "remove_photo", "skip_photo"]))
@admin_required
async def handle_photo_action(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    action = callback.data
    user_data = await state.get_data()
    section_id = user_data['section_id']

    db = SessionLocal()
    try:
        section = db.query(MainMenuSection).filter(MainMenuSection.id == section_id).first()
        if not section:
            await callback.answer("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        if action == "remove_photo":
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            if section.photo_path and os.path.exists(section.photo_path):
                try:
                    os.remove(section.photo_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {section.photo_path}: {e}")

            section.photo_path = None
            section.file_id = None
            db.commit()

            await callback.message.answer("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ! –†–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω.")
            await callback.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())
            await state.clear()

        elif action == "change_photo":
            await callback.message.answer("üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:")
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ editing_photo, –∂–¥–µ–º —Ñ–æ—Ç–æ

        elif action == "skip_photo":
            await callback.message.answer("‚úÖ –†–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await callback.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())
            await state.clear()

    except Exception as e:
        db.rollback()
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
        logger.error(f"Photo action error: {e}")
        await state.clear()
    finally:
        db.close()

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
@admin_router.message(EditMainMenu.editing_photo, F.content_type == ContentType.PHOTO)
@admin_required
async def process_section_photo(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    section_id = user_data['section_id']

    db = SessionLocal()
    try:
        section = db.query(MainMenuSection).filter(MainMenuSection.id == section_id).first()
        if not section:
            await message.answer("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if section.photo_path and os.path.exists(section.photo_path):
            try:
                os.remove(section.photo_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ {section.photo_path}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)
        file_path = f"files/{file_id}_{message.message_id}.jpg"
        await bot.download_file(file.file_path, file_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        section.photo_path = file_path
        section.file_id = file_id
        db.commit()

        await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –†–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω.")
        await message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

    except Exception as e:
        db.rollback()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ")
        logger.error(f"Photo upload error: {e}")
    finally:
        db.close()

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–∏–ø–æ–≤, —Ç–æ–≤–∞—Ä–æ–≤)
# ... [–∑–¥–µ—Å—å –æ—Å—Ç–∞—é—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–∏–ø–æ–≤]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "add_category")
@admin_required
async def start_add_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AddCategory.entering_name)
    await callback.answer()


@admin_router.message(AddCategory.entering_name, F.text)
@admin_required
async def process_category_name(message: Message, state: FSMContext):
    category_name = message.text.strip()
    db = SessionLocal()
    try:
        existing_category = db.query(Category).filter(Category.name == category_name).first()
        if existing_category:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        new_category = Category(name=category_name)
        db.add(new_category)
        db.commit()
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())
    except Exception as e:
        db.rollback()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
    finally:
        db.close()
    await state.clear()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
@admin_router.callback_query(F.data == "add_type")
@admin_required
async def start_add_type(callback: types.CallbackQuery, state: FSMContext):
    db = SessionLocal()
    try:
        categories = db.query(Category).all()
        if not categories:
            await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
            await callback.answer()
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(text=category.name, callback_data=f"cat_{category.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.adjust(1)

        await callback.message.answer(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddType.choosing_category)
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(AddType.choosing_category, F.data.startswith("cat_"))
@admin_required
async def process_category_for_type(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await state.update_data(category_id=category_id)
    await callback.message.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞:")
    await state.set_state(AddType.entering_name)
    await callback.answer()


@admin_router.message(AddType.entering_name, F.text)
@admin_required
async def process_type_name(message: Message, state: FSMContext):
    type_name = message.text.strip()
    user_data = await state.get_data()
    category_id = user_data['category_id']
    db = SessionLocal()
    try:
        existing_type = db.query(Type).filter(
            Type.name == type_name,
            Type.category_id == category_id
        ).first()
        if existing_type:
            await message.answer("‚ùå –¢–∏–ø —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
            return

        new_type = Type(name=type_name, category_id=category_id)
        db.add(new_type)
        db.commit()
        category = db.query(Category).filter(Category.id == category_id).first()
        await message.answer(f"‚úÖ –¢–∏–ø '{type_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category.name}'!")
        await message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())
    except Exception as e:
        db.rollback()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞!")
    finally:
        db.close()
    await state.clear()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data == "add_product")
@admin_required
async def start_add_product(callback: types.CallbackQuery, state: FSMContext):
    db = SessionLocal()
    try:
        categories = db.query(Category).all()
        if not categories:
            await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
            await callback.answer()
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(text=category.name, callback_data=f"product_cat_{category.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.adjust(1)

        await callback.message.answer(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddProduct.choosing_category)
        await state.update_data(media_files=[])
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(AddProduct.choosing_category, F.data.startswith("product_cat_"))
@admin_required
async def process_product_category(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.update_data(category_id=category_id)
    db = SessionLocal()
    try:
        category = db.query(Category).filter(Category.id == category_id).first()
        types = db.query(Type).filter(Type.category_id == category_id).all()
        if not types:
            await callback.message.answer(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –Ω–µ—Ç —Ç–∏–ø–æ–≤! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø.")
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for type_obj in types:
            builder.button(text=type_obj.name, callback_data=f"product_type_{type_obj.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="add_product")
        builder.adjust(1)

        await callback.message.answer(
            f"üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}':",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddProduct.choosing_type)
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(AddProduct.choosing_type, F.data.startswith("product_type_"))
@admin_required
async def process_product_type(callback: types.CallbackQuery, state: FSMContext):
    type_id = int(callback.data.split("_")[2])
    await state.update_data(type_id=type_id)
    await callback.message.answer("üö™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.entering_name)
    await callback.answer()


@admin_router.message(AddProduct.entering_name, F.text)
@admin_required
async def process_product_name(message: Message, state: FSMContext):
    product_name = message.text.strip()
    await state.update_data(product_name=product_name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.entering_description)


@admin_router.message(AddProduct.entering_description, F.text)
@admin_required
async def process_product_description(message: Message, state: FSMContext):
    product_description = message.text.strip()
    await state.update_data(product_description=product_description)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddProduct.entering_price)


@admin_router.message(AddProduct.entering_price, F.text)
@admin_required
async def process_product_price(message: Message, state: FSMContext):
    try:
        price = int(message.text.strip())
        if price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        await state.update_data(price=price)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞", callback_data="finish_media")]
        ])
        await message.answer(
            "üñºÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞.\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        await state.set_state(AddProduct.adding_media)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")


@admin_router.message(AddProduct.adding_media, F.content_type.in_({ContentType.PHOTO, ContentType.VIDEO}))
@admin_required
async def process_product_media(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    media_files = user_data.get('media_files', [])
    try:
        if message.photo:
            file_id = message.photo[-1].file_id
            media_type = "photo"
        elif message.video:
            file_id = message.video.file_id
            media_type = "video"
        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ!")
            return

        file = await bot.get_file(file_id)
        file_path = f"{MEDIA_FOLDER}/{file_id}_{message.message_id}.jpg" if media_type == "photo" else f"{MEDIA_FOLDER}/{file_id}_{message.message_id}.mp4"
        await bot.download_file(file.file_path, file_path)

        media_files.append({
            'file_id': file_id,
            'file_path': file_path,
            'media_type': media_type
        })
        await state.update_data(media_files=media_files)
        await message.answer(f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(media_files)}")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞!")


@admin_router.callback_query(AddProduct.adding_media, F.data == "finish_media")
@admin_required
async def finish_media_and_save_product(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    if not user_data.get('media_files'):
        await callback.message.answer("‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.")
        await callback.answer()
        return

    db = SessionLocal()
    try:
        new_product = Product(
            name=user_data['product_name'],
            description=user_data['product_description'],
            price=user_data['price'],
            type_id=user_data['type_id']
        )
        db.add(new_product)
        db.flush()

        for media_info in user_data['media_files']:
            media = ProductMedia(
                product_id=new_product.id,
                file_id=media_info['file_id'],
                file_path=media_info['file_path'],
                media_type=media_info['media_type']
            )
            db.add(media)

        db.commit()
        product_type = db.query(Type).filter(Type.id == user_data['type_id']).first()
        category = db.query(Category).filter(Category.id == user_data['category_id']).first()

        success_message = (
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
            f"üè∑Ô∏è –¢–∏–ø: {product_type.name}\n"
            f"üö™ –¢–æ–≤–∞—Ä: {user_data['product_name']}\n"
            f"üí∞ –¶–µ–Ω–∞: {user_data['price']} —Ä—É–±.\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data['product_description']}\n"
            f"üñºÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {len(user_data['media_files'])}"
        )

        await callback.message.answer(success_message)
        await callback.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())
    except Exception as e:
        db.rollback()
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
    finally:
        db.close()
    await state.clear()
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "delete_category")
@admin_required
async def start_delete_category(callback: types.CallbackQuery, state: FSMContext):
    db = SessionLocal()
    try:
        categories = db.query(Category).all()
        if not categories:
            await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            await callback.answer()
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(text=category.name, callback_data=f"confirm_delete_category_{category.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.adjust(1)

        await callback.message.answer(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(F.data.startswith("confirm_delete_category_"))
@admin_required
async def process_delete_category(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[3])
    db = SessionLocal()
    try:
        category = db.query(Category).filter(Category.id == category_id).first()
        if not category:
            await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        types = db.query(Type).filter(Type.category_id == category_id).all()
        deleted_files_count = 0

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ —ç—Ç–∏—Ö —Ç–∏–ø–∞—Ö
        for type_obj in types:
            products = db.query(Product).filter(Product.type_id == type_obj.id).all()
            for product in products:
                # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–∞ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
                media_files = db.query(ProductMedia).filter(ProductMedia.product_id == product.id).all()
                for media in media_files:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
                    if os.path.exists(media.file_path):
                        try:
                            os.remove(media.file_path)
                            deleted_files_count += 1
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {media.file_path}: {e}")
                    db.delete(media)
                db.delete(product)
            db.delete(type_obj)

        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_name = category.name
        db.delete(category)
        db.commit()

        await callback.message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã!\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {deleted_files_count}"
        )
        await callback.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

    except Exception as e:
        db.rollback()
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
    finally:
        db.close()
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
@admin_router.callback_query(F.data == "delete_type")
@admin_required
async def start_delete_type(callback: types.CallbackQuery, state: FSMContext):
    db = SessionLocal()
    try:
        categories = db.query(Category).all()
        if not categories:
            await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤!")
            await callback.answer()
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(text=category.name, callback_data=f"delete_type_category_{category.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.adjust(1)

        await callback.message.answer(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(DeleteType.choosing_category)
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(DeleteType.choosing_category, F.data.startswith("delete_type_category_"))
@admin_required
async def choose_type_for_deletion(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    db = SessionLocal()
    try:
        category = db.query(Category).filter(Category.id == category_id).first()
        types = db.query(Type).filter(Type.category_id == category_id).all()
        if not types:
            await callback.message.answer(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –Ω–µ—Ç —Ç–∏–ø–æ–≤!")
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for type_obj in types:
            builder.button(text=type_obj.name, callback_data=f"confirm_delete_type_{type_obj.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_type")
        builder.adjust(1)

        await callback.message.answer(
            f"üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}':",
            reply_markup=builder.as_markup()
        )
        await state.set_state(DeleteType.choosing_type)
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(DeleteType.choosing_type, F.data.startswith("confirm_delete_type_"))
@admin_required
async def process_delete_type(callback: types.CallbackQuery, state: FSMContext):
    type_id = int(callback.data.split("_")[3])
    db = SessionLocal()
    try:
        type_obj = db.query(Type).filter(Type.id == type_id).first()
        if not type_obj:
            await callback.message.answer("‚ùå –¢–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await callback.answer()
            return

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–º —Ç–∏–ø–µ
        products = db.query(Product).filter(Product.type_id == type_id).all()
        deleted_files_count = 0

        for product in products:
            # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–∞
            media_files = db.query(ProductMedia).filter(ProductMedia.product_id == product.id).all()
            for media in media_files:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
                if os.path.exists(media.file_path):
                    try:
                        os.remove(media.file_path)
                        deleted_files_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {media.file_path}: {e}")
                db.delete(media)
            db.delete(product)

        # –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–∏–ø
        type_name = type_obj.name
        db.delete(type_obj)
        db.commit()

        await callback.message.answer(
            f"‚úÖ –¢–∏–ø '{type_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã!\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {deleted_files_count}"
        )
        await callback.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

    except Exception as e:
        db.rollback()
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞!")
    finally:
        db.close()
    await state.clear()
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data == "delete_product")
@admin_required
async def start_delete_product(callback: types.CallbackQuery, state: FSMContext):
    db = SessionLocal()
    try:
        categories = db.query(Category).all()
        if not categories:
            await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤!")
            await callback.answer()
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(text=category.name, callback_data=f"delete_product_category_{category.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.adjust(1)

        await callback.message.answer(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(DeleteProduct.choosing_category)
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(DeleteProduct.choosing_category, F.data.startswith("delete_product_category_"))
@admin_required
async def choose_type_for_product_deletion(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    db = SessionLocal()
    try:
        category = db.query(Category).filter(Category.id == category_id).first()
        types = db.query(Type).filter(Type.category_id == category_id).all()
        if not types:
            await callback.message.answer(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –Ω–µ—Ç —Ç–∏–ø–æ–≤!")
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for type_obj in types:
            builder.button(text=type_obj.name, callback_data=f"delete_product_type_{type_obj.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_product")
        builder.adjust(1)

        await callback.message.answer(
            f"üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}':",
            reply_markup=builder.as_markup()
        )
        await state.set_state(DeleteProduct.choosing_type)
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(DeleteProduct.choosing_type, F.data.startswith("delete_product_type_"))
@admin_required
async def choose_product_for_deletion(callback: types.CallbackQuery, state: FSMContext):
    type_id = int(callback.data.split("_")[3])
    await state.update_data(type_id=type_id)
    db = SessionLocal()
    try:
        type_obj = db.query(Type).filter(Type.id == type_id).first()
        products = db.query(Product).filter(Product.type_id == type_id).all()
        if not products:
            await callback.message.answer(f"‚ùå –í —Ç–∏–ø–µ '{type_obj.name}' –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!")
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for product in products:
            builder.button(text=product.name, callback_data=f"confirm_delete_product_{product.id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"delete_product_category_{type_obj.category_id}")
        builder.adjust(1)

        await callback.message.answer(
            f"üö™ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ç–∏–ø–∞ '{type_obj.name}':",
            reply_markup=builder.as_markup()
        )
    finally:
        db.close()
    await callback.answer()


@admin_router.callback_query(F.data.startswith("confirm_delete_product_"))
@admin_required
async def process_delete_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[3])
    db = SessionLocal()
    try:
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await callback.answer()
            return

        # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–∞
        media_files = db.query(ProductMedia).filter(ProductMedia.product_id == product_id).all()
        deleted_files_count = 0

        for media in media_files:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
            if os.path.exists(media.file_path):
                try:
                    os.remove(media.file_path)
                    deleted_files_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {media.file_path}: {e}")
            db.delete(media)

        # –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
        product_name = product.name
        db.delete(product)
        db.commit()

        await callback.message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã!\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {deleted_files_count}"
        )
        await callback.message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

    except Exception as e:
        db.rollback()
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
    finally:
        db.close()
    await callback.answer()