from sqlalchemy import create_engine, Column, Integer, String, Text, ForeignKey, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from aiogram.filters.callback_data import CallbackData
import os

from config import DATABASE_URL


class CategoryPagination(CallbackData, prefix="cat_pag"):
    page: int


class TypePagination(CallbackData, prefix="type_pag"):
    category_id: int
    page: int


class ProductPagination(CallbackData, prefix="prod_pag"):
    type_id: int
    page: int


# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –º–µ–¥–∏–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs("doors", exist_ok=True)
os.makedirs("files", exist_ok=True)  # –ù–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


class Category(Base):
    __tablename__ = "categories"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True, nullable=False)

    # –°–≤—è–∑—å —Å —Ç–∏–ø–∞–º–∏
    types = relationship("Type", back_populates="category", cascade="all, delete-orphan")


class Type(Base):
    __tablename__ = "types"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    category_id = Column(Integer, ForeignKey("categories.id"))

    # –°–≤—è–∑–∏
    category = relationship("Category", back_populates="types")
    products = relationship("Product", back_populates="type", cascade="all, delete-orphan")


class Product(Base):
    __tablename__ = "products"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(200), nullable=False)
    description = Column(Text)
    price = Column(Integer, nullable=False, default=0)  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    type_id = Column(Integer, ForeignKey("types.id"))

    # –°–≤—è–∑–∏
    type = relationship("Type", back_populates="products")
    media = relationship("ProductMedia", back_populates="product", cascade="all, delete-orphan")


class ProductMedia(Base):
    __tablename__ = "product_media"

    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    file_id = Column(String(255))  # file_id –æ—Ç Telegram
    file_path = Column(String(500))  # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    media_type = Column(String(10))  # 'photo' –∏–ª–∏ 'video'

    product = relationship("Product", back_populates="media")


# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class Cart(Base):
    __tablename__ = "carts"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, nullable=False)
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer, default=1)

    product = relationship("Product")


# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
class Order(Base):
    __tablename__ = "orders"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, nullable=False)
    user_name = Column(String(100))
    phone_number = Column(String(20))
    total_amount = Column(Integer)
    status = Column(String(20), default="pending")
    created_at = Column(String(50))


class OrderItem(Base):
    __tablename__ = "order_items"

    id = Column(Integer, primary_key=True, index=True)
    order_id = Column(Integer, ForeignKey("orders.id"))
    product_id = Column(Integer, ForeignKey("products.id"))
    product_name = Column(String(200))
    product_price = Column(Integer)
    quantity = Column(Integer)

    product = relationship("Product")
    order = relationship("Order")


# –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
class MainMenuSection(Base):
    __tablename__ = "main_menu_sections"

    id = Column(Integer, primary_key=True, index=True)
    section_key = Column(String(50), unique=True, nullable=False)  # services, info, consultation
    title = Column(String(100), nullable=False)  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    content = Column(Text, default="")  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞
    photo_path = Column(String(500), nullable=True)  # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    file_id = Column(String(255), nullable=True)  # file_id –æ—Ç Telegram


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
def create_tables():
    Base.metadata.create_all(bind=engine)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    migrate_database()


def migrate_database():
    """–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –∏ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ price –≤ —Ç–∞–±–ª–∏—Ü–µ products
        result = db.execute(text("PRAGMA table_info(products)"))
        columns = [row[1] for row in result]

        if 'price' not in columns:
            print("–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü price –≤ —Ç–∞–±–ª–∏—Ü—É products...")
            db.execute(text("ALTER TABLE products ADD COLUMN price INTEGER NOT NULL DEFAULT 0"))
            print("–°—Ç–æ–ª–±–µ—Ü price —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã main_menu_sections
        result = db.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='main_menu_sections'"))
        table_exists = result.fetchone()

        if not table_exists:
            print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É main_menu_sections...")
            MainMenuSection.__table__.create(engine)
            print("–¢–∞–±–ª–∏—Ü–∞ main_menu_sections —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        create_initial_sections(db)
        db.commit()

    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        db.close()


def create_initial_sections(db):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    sections_data = [
        {
            'section_key': 'services',
            'title': 'üõ†Ô∏è –£—Å–ª—É–≥–∏',
            'content': 'üõ†Ô∏è –†–∞–∑–¥–µ–ª "–£—Å–ª—É–≥–∏" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        },
        {
            'section_key': 'info',
            'title': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            'content': '‚ÑπÔ∏è –†–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        },
        {
            'section_key': 'consultation',
            'title': 'üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
            'content': 'üí¨ –†–∞–∑–¥–µ–ª "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        }
    ]

    for section_data in sections_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–∞–∑–¥–µ–ª
        existing_section = db.query(MainMenuSection).filter(
            MainMenuSection.section_key == section_data['section_key']
        ).first()

        if not existing_section:
            print(f"–°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª: {section_data['section_key']}")
            new_section = MainMenuSection(
                section_key=section_data['section_key'],
                title=section_data['title'],
                content=section_data['content']
            )
            db.add(new_section)
        else:
            print(f"–†–∞–∑–¥–µ–ª {section_data['section_key']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()